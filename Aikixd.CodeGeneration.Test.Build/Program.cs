using Aikixd.CodeGeneration.Core;
using Microsoft.Build.Evaluation;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;

namespace Aikixd.CodeGeneration.Test.Build
{
    partial class Program
    {

        class SolutionExplorer : ISolutionExplorer
        {
            private ProjectCollection projectCollection;

            public SolutionExplorer()
            {
                this.projectCollection = new ProjectCollection();
            }

            public IProjectExplorer GetProject(ProjectGenerationInfo projectInfo)
            {
                return new ProjectExplorer(this.projectCollection.LoadProject(projectInfo.Path));
            }

            public void Save()
            {
                foreach (var p in this.projectCollection.LoadedProjects)
                    p.Save();
            }
        }

        static void Main(string[] args)
        {
            Microsoft.Build.Locator.MSBuildLocator.RegisterDefaults();

            var g = new Generator("AutoGenerated", new SolutionExplorer());

            var genNfo = new HashSet<ProjectGenerationInfo> {
                new ProjectGenerationInfo(
                    Path.GetFullPath(
                        Path.Combine(
                            Directory.GetCurrentDirectory(),
                            @"..\..\..\..\Aikixd.CodeGeneration.Test.Build.Target.Classic\Aikixd.CodeGeneration.Test.Build.Target.Classic.csproj")),
                    new []
                    {
                        new FileGroup("Mod", "cs")
                    },
                    new HashSet<FileGenerationInfo> {
                        new FileGenerationInfo(
                            "TestName",
                            "Aikixd.TestNamespace",
                            new FileGroup("Mod", "cs"),
                            "Generated at: " + DateTime.Now.ToLongTimeString())
                    }),

                new ProjectGenerationInfo(
                    Path.GetFullPath(
                        Path.Combine(
                            Directory.GetCurrentDirectory(),
                            @"..\..\..\..\Aikixd.CodeGeneration.Test.Build.Target.Netcore\Aikixd.CodeGeneration.Test.Build.Target.Netcore.csproj")),
                    new []
                    {
                        new FileGroup("Mod", "cs")
                    },
                    new HashSet<FileGenerationInfo> {
                        new FileGenerationInfo(
                            "TestName",
                            "Aikixd.TestNamespace",
                            new FileGroup("Mod", "cs"),
                            "Generated at: " + DateTime.Now.ToLongTimeString())
                    })
            };

            var rs1 = g.Generate(genNfo);

            Debug.Assert(rs1.All(x => x.Results.Single().Message.StartsWith("Created")));

            var rs2 = g.Generate(genNfo);

            Debug.Assert(rs2.All(x => x.Results.Single().Message.StartsWith("Updated")));
        }        
    }
}
